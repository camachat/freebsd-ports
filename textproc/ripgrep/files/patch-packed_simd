--- cargo-crates/packed_simd-0.3.3/src/api/into_bits/arch_specific.rs.orig	2019-02-05 20:18:53 UTC
+++ cargo-crates/packed_simd-0.3.3/src/api/into_bits/arch_specific.rs
@@ -84,7 +84,6 @@ macro_rules! impl_arch {
 // FIXME: 64-bit single element types
 // FIXME: arm/aarch float16x4_t missing
 impl_arch!(
-    [x86["x86"]: __m64], [x86_64["x86_64"]: __m64],
     [arm["arm"]: int8x8_t, uint8x8_t, poly8x8_t, int16x4_t, uint16x4_t,
      poly16x4_t, int32x2_t, uint32x2_t, float32x2_t, int64x1_t,
      uint64x1_t],
--- cargo-crates/packed_simd-0.3.3/src/codegen/reductions/mask/x86/sse.rs.orig	2019-01-31 15:25:21 UTC
+++ cargo-crates/packed_simd-0.3.3/src/codegen/reductions/mask/x86/sse.rs
@@ -34,35 +34,3 @@ macro_rules! x86_m32x4_sse_impl {
         }
     };
 }
-
-macro_rules! x86_m8x8_sse_impl {
-    ($id:ident) => {
-        impl All for $id {
-            #[inline]
-            #[target_feature(enable = "sse")]
-            unsafe fn all(self) -> bool {
-                #[cfg(target_arch = "x86")]
-                use crate::arch::x86::_mm_movemask_pi8;
-                #[cfg(target_arch = "x86_64")]
-                use crate::arch::x86_64::_mm_movemask_pi8;
-                // _mm_movemask_pi8(a) creates an 8bit mask containing the most
-                // significant bit of each byte of `a`. If all bits are set,
-                // then all 8 lanes of the mask are true.
-                _mm_movemask_pi8(crate::mem::transmute(self))
-                    == u8::max_value() as i32
-            }
-        }
-        impl Any for $id {
-            #[inline]
-            #[target_feature(enable = "sse")]
-            unsafe fn any(self) -> bool {
-                #[cfg(target_arch = "x86")]
-                use crate::arch::x86::_mm_movemask_pi8;
-                #[cfg(target_arch = "x86_64")]
-                use crate::arch::x86_64::_mm_movemask_pi8;
-
-                _mm_movemask_pi8(crate::mem::transmute(self)) != 0
-            }
-        }
-    };
-}
--- cargo-crates/packed_simd-0.3.3/src/codegen/reductions/mask/x86.rs.orig	2019-01-31 15:25:21 UTC
+++ cargo-crates/packed_simd-0.3.3/src/codegen/reductions/mask/x86.rs
@@ -19,13 +19,7 @@ mod avx2;
 /// x86 64-bit m8x8 implementation
 macro_rules! x86_m8x8_impl {
     ($id:ident) => {
-        cfg_if! {
-            if #[cfg(all(target_arch = "x86_64", target_feature = "sse"))] {
-                x86_m8x8_sse_impl!($id);
-            } else {
-                fallback_impl!($id);
-            }
-        }
+        fallback_impl!($id);
     };
 }
 
--- cargo-crates/packed_simd-0.3.3/src/codegen/shuffle1_dyn.rs.orig	2019-02-05 20:18:53 UTC
+++ cargo-crates/packed_simd-0.3.3/src/codegen/shuffle1_dyn.rs
@@ -28,28 +28,7 @@ macro_rules! impl_fallback {
 macro_rules! impl_shuffle1_dyn {
     (u8x8) => {
         cfg_if! {
-            if #[cfg(all(any(target_arch = "x86", target_arch = "x86_64"),
-                         target_feature = "ssse3"))] {
-                impl Shuffle1Dyn for u8x8 {
-                    type Indices = Self;
-                    #[inline]
-                    fn shuffle1_dyn(self, indices: Self::Indices) -> Self {
-                        #[cfg(target_arch = "x86")]
-                        use crate::arch::x86::_mm_shuffle_pi8;
-                        #[cfg(target_arch = "x86_64")]
-                        use crate::arch::x86_64::_mm_shuffle_pi8;
-
-                        unsafe {
-                            crate::mem::transmute(
-                                _mm_shuffle_pi8(
-                                    crate::mem::transmute(self.0),
-                                    crate::mem::transmute(indices.0)
-                                )
-                            )
-                        }
-                    }
-                }
-            } else if #[cfg(all(
+            if #[cfg(all(
                 any(
                     all(target_aarch = "aarch64", target_feature = "neon"),
                     all(target_aarch = "arm", target_feature = "v7",
--- cargo-crates/packed_simd-0.3.3/src/lib.rs.orig	2019-02-05 20:18:53 UTC
+++ cargo-crates/packed_simd-0.3.3/src/lib.rs
@@ -210,7 +210,6 @@
     core_intrinsics,
     stmt_expr_attributes,
     align_offset,
-    mmx_target_feature,
     crate_visibility_modifier,
     custom_inner_attributes
 )]
